// Generated by CoffeeScript 1.6.3
(function() {
  var aws_access_key_id, aws_secret_key, crypto, mime, url;

  crypto = require('crypto');

  mime = require('mime');

  url = require('url');

  aws_secret_key = process.env['AWS_SECRET_KEY'];

  if (!aws_secret_key) {
    throw "missing AWS_SECRET_KEY environment variable";
  }

  aws_access_key_id = process.env['AWS_ACCESS_KEY_ID'];

  if (!aws_access_key_id) {
    throw "missing AWS_ACCESS_KEY_ID environment variable";
  }

  module.exports = function(filename, opts, callback) {
    var base64_policy, credentials, key, mimetype, policy, signature, string_policy;
    if (opts['acl'] == null) {
      opts['acl'] = 'public-read';
    }
    mimetype = mime.lookup(filename);
    key = filename.split('/').slice(-1)[0].split('\\').slice(-1)[0];
    policy = {
      expiration: new Date(new Date().getTime() + 30 * 60000).toISOString(),
      conditions: [
        {
          bucket: opts['bucket_name']
        }, ['eq', '$key', key], {
          'acl': opts['acl']
        }, ['content-length-range', 0, 2147483648], ['eq', '$Content-Type', mimetype]
      ].concat(opts['success_action_status'] ? [
        {
          success_action_status: opts['success_action_status']
        }
      ] : opts['success_action_redirect'] ? [
        {
          success_action_redirect: opts['success_action_redirect']
        }
      ] : [])
    };
    string_policy = JSON.stringify(policy);
    base64_policy = new Buffer(string_policy, 'utf-8').toString('base64');
    signature = crypto.createHmac('sha1', aws_secret_key).update(new Buffer(base64_policy, 'utf-8')).digest('base64');
    credentials = {
      policy: base64_policy,
      signature: signature,
      access_key_id: aws_access_key_id,
      success_action_redirect: opts['success_action_redirect'],
      success_action_status: opts['success_action_status'],
      key: key,
      content_type: mimetype,
      acl: opts['acl']
    };
    return callback(credentials);
  };

}).call(this);
